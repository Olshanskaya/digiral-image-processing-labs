import cv2
import matplotlib.pyplot as plt
import numpy as np
import math
import matplotlib.image as mpimg


# gaussian filter
def gfunc(x, y, sigma):
    return (math.exp(-(x ** 2 + y ** 2) / (2 * (sigma ** 2)))) / (2 * 3.14 * (sigma ** 2))


def gaussFilter(size, sigma):
    out = np.zeros(size)
    for i in range(size[0]):
        for j in range(size[1]):
            out[i, j] = gfunc(i - size[0] // 2, j - size[1] // 2, sigma)
    return out / np.sum(out)


def bfunc(i, j, fw, fh, image, sigma1, sigma2, bilateralWFilter):
    imgwork = image[i - fh // 2:i + 1 + fh // 2, j - fw // 2:j + 1 + fw // 2, :]

    bilateralIFilter = ((imgwork - image[i, j, :]) ** 2) / (2 * (sigma1 ** 2))

    bilateralFilter = np.exp(-1 * bilateralIFilter) * bilateralWFilter
    bilateralFilter = bilateralFilter / np.sum(bilateralFilter, axis=(0, 1))
    return np.sum(np.multiply(imgwork, bilateralFilter), axis=(0, 1))


def bilateralFilterConv(image, fw, fh):
    size = image.shape
    sigma1 = 40
    sigma2 = 40
    bilateral1 = 2 * 3.14 * sigma2 * sigma2 * gaussFilter((fw, fh), sigma2)
    if len(image.shape) < 3 or image.shape[2] == 1:
        bilateralWFilter = np.resize(bilateral1, (*bilateral1.shape, 1))
    else:
        bilateralWFilter = np.stack([bilateral1, bilateral1, bilateral1], axis=2)

    out = np.zeros((size[0] - 2 * fw + 1, size[1] - 2 * fh + 1, size[2]))
    for i in range(size[0] - 2 * fh + 1):
        for j in range(size[1] - 2 * fw + 1):
            out[i, j, :] = bfunc(i + fw - 1, j + fh - 1, fw, fh, image, sigma1, sigma2, bilateralWFilter)

    if id == 1:
        return np.resize(out, (out.shape[0], out.shape[1])).astype(np.uint8)
    else:
        return out.astype(np.uint8)


if __name__ == '__main__':
    fig = plt.figure(1, figsize=(18, 16))
    img = mpimg.imread("zebra.jpg")
    #img = cv2.imread("zebra.jpg", 0)
    print(" ========================================= Bilateral Filter =========================================")
    for i in range(3, 8, 2):
        splot = plt.subplot(130 - 1 + ((i + 1) // 2))
        splot.set_xlabel(str(i) + "x" + str(i))
        bfw, bfh = (i, i)
        bilateral_image = bilateralFilterConv(img, bfw, bfh)
        imshow(bilateral_image)
        cv2.imwrite("bilateral" + str(i) + "x" + str(i) + ".jpg", bilateral_image)
    plt.show()
